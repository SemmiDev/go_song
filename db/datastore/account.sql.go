// Code generated by sqlc. DO NOT EDIT.
// source: account.sql

package db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (id, name, email, password) VALUES ($1, $2, $3, $4) RETURNING id, name, email, password, is_email_verified, created_at
`

type CreateAccountParams struct {
	ID       string `json:"id"`
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.IsEmailVerified,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountByEmail = `-- name: GetAccountByEmail :one
SELECT id, name, email, password, is_email_verified, created_at FROM accounts WHERE email = $1 LIMIT 1
`

func (q *Queries) GetAccountByEmail(ctx context.Context, email string) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByEmail, email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.IsEmailVerified,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountById = `-- name: GetAccountById :one
SELECT id, name, email, password, is_email_verified, created_at FROM accounts WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccountById(ctx context.Context, id string) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountById, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.IsEmailVerified,
		&i.CreatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, name, email, password, is_email_verified, created_at FROM accounts ORDER BY id LIMIT $1 OFFSET $2
`

type ListAccountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.db.Query(ctx, listAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.IsEmailVerified,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountEmailVerificationByEmail = `-- name: UpdateAccountEmailVerificationByEmail :one
UPDATE accounts SET is_email_verified = $2 WHERE email = $1 RETURNING id, name, email, password, is_email_verified, created_at
`

type UpdateAccountEmailVerificationByEmailParams struct {
	Email           string `json:"email"`
	IsEmailVerified bool   `json:"is_email_verified"`
}

func (q *Queries) UpdateAccountEmailVerificationByEmail(ctx context.Context, arg UpdateAccountEmailVerificationByEmailParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateAccountEmailVerificationByEmail, arg.Email, arg.IsEmailVerified)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.IsEmailVerified,
		&i.CreatedAt,
	)
	return i, err
}

const updateAccountEmailVerificationByID = `-- name: UpdateAccountEmailVerificationByID :one
UPDATE accounts SET is_email_verified = $2 WHERE id = $1 RETURNING id, name, email, password, is_email_verified, created_at
`

type UpdateAccountEmailVerificationByIDParams struct {
	ID              string `json:"id"`
	IsEmailVerified bool   `json:"is_email_verified"`
}

func (q *Queries) UpdateAccountEmailVerificationByID(ctx context.Context, arg UpdateAccountEmailVerificationByIDParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateAccountEmailVerificationByID, arg.ID, arg.IsEmailVerified)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.IsEmailVerified,
		&i.CreatedAt,
	)
	return i, err
}

const updateAccountPasswordByEmail = `-- name: UpdateAccountPasswordByEmail :exec
UPDATE accounts SET password = $2 WHERE email = $1
`

type UpdateAccountPasswordByEmailParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) UpdateAccountPasswordByEmail(ctx context.Context, arg UpdateAccountPasswordByEmailParams) error {
	_, err := q.db.Exec(ctx, updateAccountPasswordByEmail, arg.Email, arg.Password)
	return err
}
